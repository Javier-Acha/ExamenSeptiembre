package jcolonia.daw2020.quinielabd;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;
import java.util.Random;
import java.util.Vector;

/**
 * Utilidades de acceso a una base de datos SQLite para gesti√≥n de
 * {@link ElementoPartido1X2 resultados de quiniela tipo 1-X-2}.
 * 
 * @versi√≥n 2021.8.1
 * @author <a href="dmartin.jcolonia@gmail.com">David H. Mart√≠n</a>
 */
public class AccesoBD implements AutoCloseable {
	/**
	 * Sentencia SQL para crear la tabla ¬´Resultados¬ª ‚Äìvac√≠a‚Äì si no existe.
	 */
	private static final String SQL_CREAR_TABLA = "CREATE TABLE IF NOT EXISTS Resultados (nombre_local TEXT NOT NULL, nombre_visitante TEXT NOT NULL, resultado TEXT NOT NULL)";

	/**
	 * Prototipo de sentenciaSQL preparada para insertar resultados.
	 */
	private static final String SQL_INSERTAR_CONTACTO = "INSERT INTO Resultados VALUES (?, ?, ?)";

	/**
	 * Sentencia SQL para obtener un volcado completo de los resultados.
	 */
	private static final String SQL_LISTADO_COMPLETO = "SELECT * FROM Resultados";

	/**
	 * Sentencia SQL para vaciar los resultados.
	 */
	private static final String SQL_VACIAR_TABLA = "DELETE FROM Resultados";

	/**
	 * Sentencia SQL para compactar espacio en el archivo de la base de datos.
	 */
	private static final String SQL_COMPACTAR_ESPACIO = "VACUUM";
	/**
	 * Nombre predeterminado del archivo de configuraci√≥n del acceso a la base de
	 * datos.
	 */
	public static final String ARCHIVO_CONFIG_PREDETERMINADO = "config.xml";

	/**
	 * Nombre predeterminado del archivo de la base de datos.
	 */
	public static final String ARCHIVO_BD_PREDETERMINADO = "quiniela.db";

	/**
	 * Configuraci√≥n del acceso a la base de datos.
	 */
	private Properties configuraci√≥n;

	/**
	 * Conexi√≥n a la base de datos.
	 */
	private Connection conexi√≥n;

	/**
	 * Sentencia general SQL.
	 */
	private Statement sentenciaGeneralSQL;

	/**
	 * Sentencia preparada SQL, para inserciones en la base de datos.
	 * 
	 * @see #SQL_INSERTAR_CONTACTO
	 */
	private PreparedStatement preInserci√≥nSQL;

	/**
	 * Carga la configuraci√≥n desde el archivo de configuraci√≥n predeterminado.
	 * 
	 * @see #ARCHIVO_CONFIG_PREDETERMINADO
	 */
	public AccesoBD() {
		this(ARCHIVO_CONFIG_PREDETERMINADO, ARCHIVO_BD_PREDETERMINADO);
	}

	/**
	 * Carga la configuraci√≥n desde un archivo de configuraci√≥n. En caso de error
	 * genera uno nuevo.
	 * 
	 * @param archivoConfiguraci√≥n la ruta y nombre del archivo
	 * @param archivoBD
	 * @param archivoBD
	 */
	public AccesoBD(String archivoConfiguraci√≥n, String archivoBD) {
		try {
			configuraci√≥n = cargarConfiguraci√≥n(archivoConfiguraci√≥n);
		} catch (AccesoBDException e) {
			if (archivoBD == null || archivoBD.isEmpty()) {
				archivoBD = ARCHIVO_BD_PREDETERMINADO;
			}
			System.err.printf("Error cargando configuraci√≥n de ¬´%s¬ª: %s%n", archivoConfiguraci√≥n, e.getMessage());
			configuraci√≥n = crearConfiguraci√≥n(archivoConfiguraci√≥n, archivoBD);
		}
	}

	/**
	 * Lee un archivo de configuraci√≥n.
	 * 
	 * @param archivoConfiguraci√≥n la ruta del archivo
	 * @return la configuraci√≥n le√≠da
	 * @throws AccesoBDException si no existe el archivo o se produce alguna
	 *                           incidencia durante la lectura
	 */
	public static Properties cargarConfiguraci√≥n(String archivoConfiguraci√≥n) throws AccesoBDException {
		Path rutaConfig;
		rutaConfig = Path.of(archivoConfiguraci√≥n);

		if (!existeArchivo(rutaConfig)) {
			String mensaje;
			mensaje = String.format("No existe el archivo ¬´%s¬ª", rutaConfig.getFileName());
			throw new AccesoBDException(mensaje);
		}

		Properties configuraci√≥n = new Properties();
		try (FileInputStream in = new FileInputStream(rutaConfig.toFile())) {
			configuraci√≥n.loadFromXML(in);
		} catch (IOException e) {
			throw new AccesoBDException("Error al cargar configuraci√≥n", e);
		}

		return configuraci√≥n;
	}

	/**
	 * Crea un archivo de configuraci√≥n con los datos de acceso a la base de datos
	 * en formato SQLite. El √∫nico aspecto relevante que contiene es el nombre del
	 * archivo.
	 * 
	 * @param archivoConfiguraci√≥n el nombre, ruta del archivo de configuraci√≥n
	 * @param archivoBD            el nombre, ruta del archivo de la base de datos
	 * @return la configuraci√≥n creada
	 */
	public static Properties crearConfiguraci√≥n(String archivoConfiguraci√≥n, String archivoBD) {
		Path rutaConfig;
		rutaConfig = Path.of(archivoConfiguraci√≥n);

		Properties configuraci√≥n = new Properties();
		configuraci√≥n.setProperty("jdbc.url", "jdbc:sqlite:" + archivoBD);
		configuraci√≥n.setProperty("jdbc.user", "");
		configuraci√≥n.setProperty("jdbc.password", "");
		configuraci√≥n.setProperty("jdbc.codificaci√≥n", "UTF-8");

		try (FileOutputStream out = new FileOutputStream(rutaConfig.toFile())) {
			configuraci√≥n.storeToXML(out, "Configuraci√≥n BD", "UTF-8");
			System.err.printf("Creado nuevo archivo de configuraci√≥n ¬´%s¬ª para ¬´%s¬ª%n", archivoConfiguraci√≥n,
					archivoBD);
		} catch (IOException e) {
			System.err.printf("Error al guardar configuraci√≥n en ¬´%s¬ª: %s%n", archivoConfiguraci√≥n,
					e.getLocalizedMessage());
		}
		return configuraci√≥n;
	}

	/**
	 * Comprueba la existencia de un archivo.
	 * 
	 * @param ruta el nombre, ruta del archivo a comprobar
	 * @return si existe o no
	 * @throws AccesoBDException si el archivo existe pero no se puede leer
	 */
	private static boolean existeArchivo(Path ruta) throws AccesoBDException {
		boolean existe;

		existe = Files.exists(ruta);

		if (existe && !Files.isReadable(ruta)) {
			String mensaje;
			mensaje = String.format("No se puede leer el archivo ¬´%s¬ª", ruta.getFileName());
			throw new AccesoBDException(mensaje);
		}
		return existe;
	}

	/**
	 * Abre la conexi√≥n a la base de datos si no ha sido abierta previamente. Crea
	 * tambi√©n una sentencia SQL gen√©rica ‚Äìdisponible para ejecutar consultas no
	 * preparadas‚Äì y la tabla principal en caso de no existir.
	 * 
	 * @return la conexi√≥n existente o creada
	 * @throws AccesoBDException si no se completa o se produce alguna incidencia
	 *                           durante la conexi√≥n
	 */
	public Connection abrirConexi√≥n() throws AccesoBDException {
		if (conexi√≥n == null) {
			String jdbcURL = configuraci√≥n.getProperty("jdbc.url");
			String jdbcUser = configuraci√≥n.getProperty("jdbc.user");
			String jdbcPassword = configuraci√≥n.getProperty("jdbc.password");

			try {
				conexi√≥n = DriverManager.getConnection(jdbcURL, jdbcUser, jdbcPassword);

				if (conexi√≥n == null) { // Conexi√≥n fallida
					String mensaje = String.format("%s ‚Äî Conexi√≥n fallida üòï%n", jdbcURL);
					throw new AccesoBDException(mensaje);
				}

				sentenciaGeneralSQL = conexi√≥n.createStatement();
				sentenciaGeneralSQL.setQueryTimeout(5);
				sentenciaGeneralSQL.execute(SQL_CREAR_TABLA);
			} catch (SQLException e) {
				String mensaje = String.format("%s ‚Äî Conexi√≥n fallida: %s", jdbcURL, e.getLocalizedMessage());
				throw new AccesoBDException(mensaje, e);
			}
		}
		return conexi√≥n;
	}

	/**
	 * Lee el contenido completo de la base de datos y crea todos los partidos. Los
	 * datos creados se depositan en la lista VAC√çA facilitada. En caso de que la
	 * lista no est√© vac√≠a se borrar√° su contenido.
	 * 
	 * @param lista una lista de resultados vac√≠a
	 * @return el n√∫mero de resultados
	 * @throws AccesoBDException si se produce alguna incidencia
	 */
	public int leer(Vector<ElementoPartido1X2> lista) throws AccesoBDException {
		ResultSet resultado;
		ElementoPartido1X2 nuevoPartido;

		String nombreLocal, nombreVisitante, resultadoPartido;

		if (lista == null) {
			throw new AccesoBDException("Lista nula");
		}

		lista.clear();

		try {
			resultado = sentenciaGeneralSQL.executeQuery(SQL_LISTADO_COMPLETO);
			while (resultado.next()) {
				nombreLocal = resultado.getString("nombre_local");
				nombreVisitante = resultado.getString("nombre_visitante");
				resultadoPartido = resultado.getString("resultado");

				nuevoPartido = ElementoPartido1X2.of(nombreLocal, nombreVisitante, resultadoPartido);
				lista.add(nuevoPartido);
			}
		} catch (SQLException | DatoPartido1X2Exception e) {
			String mensaje = String.format("Error al leer contactos: %s", e.getLocalizedMessage());
			throw new AccesoBDException(mensaje, e);
		}

		return lista.size();
	}

	/**
	 * Inserta un resultado en la base de datos. En caso de no existir la sentencia
	 * preparada se crea -permitiendo as√≠ que se pueda compartir en caso de realizar
	 * varias inserciones consecutivas-.
	 * 
	 * @param partido el resultado a grabar
	 * @return el n√∫mero de filas afectadas ‚Äìcero o una‚Ä¶‚Äì
	 * @throws AccesoBDException si se produce alguna incidencia
	 */
	public int insertar(ElementoPartido1X2 partido) throws AccesoBDException {
		int n√∫mFilas = 0;
		try {
			if (preInserci√≥nSQL == null) {
				preInserci√≥nSQL = conexi√≥n.prepareStatement(SQL_INSERTAR_CONTACTO);
				preInserci√≥nSQL.setQueryTimeout(5);
			}

			preInserci√≥nSQL.setString(1, partido.getEquipoLocal());
			preInserci√≥nSQL.setString(2, partido.getEquipoVisitante());
			preInserci√≥nSQL.setString(3, partido.getResultado().toString());
			n√∫mFilas = preInserci√≥nSQL.executeUpdate();
		} catch (SQLException e) {
			String mensaje = String.format("Error al insertar contacto: %s", e.getLocalizedMessage());
			throw new AccesoBDException(mensaje, e);
		}
		return n√∫mFilas;
	}

	/**
	 * Inserta una colecci√≥n de resultados en la base de datos.
	 * 
	 * @param lista los resultados a grabar
	 * @return el n√∫mero de filas afectadas, deber√≠a coincidir con el tama√±o de la
	 *         colecci√≥n original
	 * @throws AccesoBDException si se produce alguna incidencia
	 */
	public int escribir(Vector<ElementoPartido1X2> lista) throws AccesoBDException {
		if (lista == null) {
			throw new AccesoBDException("Lista nula");
		}

		int n√∫mFilas = 0;

		for (ElementoPartido1X2 partido : lista) {
			n√∫mFilas += insertar(partido);
		}

		return n√∫mFilas;
	}

	/**
	 * Descarta la sentencias SQL inicializadas y deja cerrada la conexi√≥n.
	 * 
	 * @throws AccesoBDException si se produce alguna incidencia
	 */
	@Override
	public void close() throws AccesoBDException {
		if (conexi√≥n != null) {
			try {
				Connection conexi√≥nCerrada = conexi√≥n;
				conexi√≥n = null;
				sentenciaGeneralSQL = null;
				preInserci√≥nSQL = null;
				conexi√≥nCerrada.close();
			} catch (SQLException e) {
				String mensaje = String.format("Error en cierre de conexi√≥n: %s", e.getLocalizedMessage());
				throw new AccesoBDException(mensaje, e);
			}
		}
	}

	/**
	 * Inserta datos de ejemplo aleatorios en la base de datos. A partir de una
	 * lista de nombres de equipos los distribuye aleatoriamente en parejas y
	 * determina un resultado tambi√©n aleatorio. Para el resultado se simula un dado
	 * con tres ¬´1¬ª, dos ¬´2¬ª y una ¬´X¬ª.
	 * 
	 * @throws AccesoBDException si se produce alguna incidencia al acceder a la
	 *                           base de datos
	 */
	private void generarBD() throws AccesoBDException {
		Vector<ElementoPartido1X2> lista;
		ElementoPartido1X2 nuevo;

		String nombreLocal, nombreVisitante, resultado;

		String[] equipos = { "At. Madrid", "R. Madrid", "FC Barcelona", "Sevilla FC", "RCD Espanyol", "Real Sociedad",
				"Getafe CF", "Real Betis", "Levante UD", "RC Celta", "CA Osasuna", "Rayo Vallecano", "Deportivo Alav√©s",
				"Elche CF", "Athletic Club", "Valencia CF", "RCD Mallorca", "Villarreal CF", "C√°diz CF", "Granada CF" };

		if (equipos.length % 2 != 0) { // Salir enseguida si no es par
			System.err.println("El n√∫mero de equipos tiene que ser par para poder hacer parejas");
			System.exit(1);
		}

		Vector<String> listaEquipos = new Vector<String>(equipos.length);
		for (String equipo : equipos) {
			listaEquipos.add(equipo);
		}

		Random rnd = new Random();

		// 1 (3 caras ‚Üí 50%), X (2 caras ‚Üí 33,33%), 2 (1 cara ‚Üí 16,66%)
		Resultado1X2[] dado1X2 = { Resultado1X2.Local1, Resultado1X2.Local1, Resultado1X2.Local1, Resultado1X2.EmpateX,
				Resultado1X2.EmpateX, Resultado1X2.Visitante2 };

		lista = new Vector<ElementoPartido1X2>();

		// Bolsa de equipos, sorteo por extracci√≥n aleatoria
		while (!listaEquipos.isEmpty()) {
			nombreLocal = listaEquipos.remove(rnd.nextInt(listaEquipos.size()));
			nombreVisitante = listaEquipos.remove(rnd.nextInt(listaEquipos.size()));
			resultado = dado1X2[rnd.nextInt(dado1X2.length)].toString();

			nuevo = new ElementoPartido1X2();
			try {
				nuevo.setDato(nombreLocal);
				nuevo.setDato(nombreVisitante);
				nuevo.setDato(resultado);
			} catch (DatoPartido1X2Exception e) {
				System.err.printf("Error de carga de datos: %s%n", e.getLocalizedMessage());
				System.exit(2);
			}

			lista.add(nuevo);
		}

		// Volcado previo a consola
		for (ElementoPartido1X2 partido : lista) {
			System.out.println(partido);
		}

		abrirConexi√≥n();
		escribir(lista);
	}

	public static void main(String[] args) {
		try (AccesoBD acceso = new AccesoBD()) {
			// Cierre impl√≠cito con close() ‚Äìtry_with_resources‚Äì
			acceso.generarBD();
		} catch (AccesoBDException e) {
			System.err.println(e.getLocalizedMessage());
		}
	}
}
